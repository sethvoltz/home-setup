#!/bin/bash -e

echo "Fetching new cluster kubeconfig from k3s primary node."
echo

echo -n "Setting up...                                      "

# Script setup
basepath=$(realpath $(dirname $0)/..)
tf_output="terraform -chdir=${basepath}/physical output"
tmp_filename=~/.kube/config-k3s
new_context_name="config-k3s"

# Pull from physical terraform outputs
control0=$(${tf_output} -json control-plane | jq -r ' ."kube-control-00"')
control_vip=$(${tf_output} -raw control-plane-vip)
ssh_key_path=$(${tf_output} -raw ssh-private-key-path)
ssh_username=$(${tf_output} -raw ssh-user)

echo "[ OK ]"

# Download the new file
echo -n "Downloading cluster kubeconfig...                  "
scp -q -i $ssh_key_path $ssh_username@$control0:/etc/rancher/k3s/k3s.yaml ${tmp_filename}
echo "[ OK ]"

echo -n "Modifying kubeconfig to be unique...               "

# Rename the context
sed -i.bak "s/: default/: ${new_context_name}/" ${tmp_filename}

# Update the downloaded config file to point to the IP of the control plane VIP
sed -i.bak "s/127.0.0.1/${control_vip}/" ${tmp_filename}

echo "[ OK ]"

echo -n "Merging new kubeconfig with any existing config... "

# Backup any old one if it exists
if [ -f "~/.kube/config" ]; then
  cp ~/.kube/config ~/.kube/config.bak
fi

# Merge with any existing kubeconfig
KUBECONFIG=~/.kube/config:${tmp_filename} kubectl config view --flatten > ~/.kube/config.new
mv ~/.kube/config.new ~/.kube/config

echo "[ OK ]"

echo
echo "Done. New config is abailable under context '${new_context_name}.'"
echo "Make the context default with 'kubectl config use-context ${new_context_name}'"
